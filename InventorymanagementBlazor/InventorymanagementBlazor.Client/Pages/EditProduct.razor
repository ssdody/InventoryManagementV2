@page "/edit-product/{ProductId}"
@using InventoryManagementShared.Models
@using InventorymanagementBlazor.Client.Services
@inject IProductService ProductService
@inject IStoreService StoreService
@inject NavigationManager Navigation
@rendermode InteractiveAuto

<h3>Edit Product</h3>

<EditForm Model="ProductToEdit" OnValidSubmit="UpdateProductAsync" FormName="EditProductForm">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="ProductToEdit.Name" />
    </div>

    <div class="mb-3">
        <label for="category" class="form-label">Category</label>
        <InputText id="category" class="form-control" @bind-Value="ProductToEdit.Category" />
    </div>

    <div class="mb-3">
        <label for="quantity" class="form-label">Quantity</label>
        <InputNumber id="quantity" class="form-control" @bind-Value="ProductToEdit.Quantity" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="ProductToEdit.Price" />
    </div>

    <div class="mb-3">
        <label for="storeId" class="form-label">Store</label>
        <select id="storeId" class="form-control" @bind="ProductToEdit.StoreId">
            <option value="">Select Store</option>
            @foreach (var store in Stores)
            {
                <option value="@store.Id">@store.Name</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Save Changes</button>
</EditForm>

@if (SuccessMessage != null)
{
    <div class="alert alert-success">@SuccessMessage</div>
}
@if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private Product ProductToEdit = new();
    private string? SuccessMessage;
    private string? ErrorMessage;
    private List<Store> Stores = new();

    [Parameter] public string ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (int.TryParse(ProductId, out var parsedProductId))
        {
            // Fetch stores from API
            Stores = await StoreService.GetStoresAsync();

            // Fetch the product to edit
            var product = await ProductService.GetProductById(parsedProductId);

            if (product != null)
            {
                ProductToEdit = product;
            }
            else
            {
                ErrorMessage = "Product not found.";
            }
        }
        else
        {
            ErrorMessage = "Invalid Product ID.";
        }
    }

    private async Task UpdateProductAsync()
    {
        var success = await ProductService.UpdateProduct(ProductToEdit);

        if (success)
        {
            SuccessMessage = "Product updated successfully!";
        }
        else
        {
            ErrorMessage = "Failed to update product.";
        }
    }
}
