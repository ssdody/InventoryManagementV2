@page "/products"
@using InventoryManagementShared.Models
@using InventorymanagementBlazor.Client.Services
@inject IProductService ProductService
@inject NavigationManager Navigation
@rendermode InteractiveAuto

<h3>Product List</h3>

<button class="btn btn-success mb-3" @onclick="GoToCreateProduct">Create Product</button>

<input type="text" @bind="SearchTerm" placeholder="Search..." class="form-control" />
<button @onclick="SearchProducts" class="btn btn-primary mt-2">Search</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th @onclick="() => SortBy(nameof(Product.Name))">Name</th>
            <th @onclick="() => SortBy(nameof(Product.Category))">Category</th>
            <th @onclick="() => SortBy(nameof(Product.Quantity))">Quantity</th>
            <th @onclick="() => SortBy(nameof(Product.Price))">Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in FilteredProducts)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Category</td>
                <td>@product.Quantity</td>
                <td>@product.Price</td>
                <td>
                    <button class="btn btn-warning" @onclick="() => EditProduct(product.Id)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (SuccessMessage != null)
{
    <div class="alert alert-success">@SuccessMessage</div>
}
@if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private string? SuccessMessage;
    private string? ErrorMessage;

    private List<Product> Products = new();
    private List<Product> FilteredProducts = new();
    private string SearchTerm = string.Empty;
    private bool Ascending = true;
    private string SortColumn = nameof(Product.Name);

    protected override async Task OnInitializedAsync()
    {
        Products = await ProductService.GetProductsAsync();
        FilteredProducts = Products;
    }

    private void SearchProducts()
    {
        FilteredProducts = Products
            .Where(p => string.IsNullOrEmpty(SearchTerm) || p.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void SortBy(string column)
    {
        if (SortColumn == column)
            Ascending = !Ascending;
        else
            SortColumn = column;

        FilteredProducts = Ascending
            ? FilteredProducts.OrderBy(p => p.GetType().GetProperty(column)?.GetValue(p)).ToList()
            : FilteredProducts.OrderByDescending(p => p.GetType().GetProperty(column)?.GetValue(p)).ToList();
    }

    private async Task DeleteProduct(int productId)
    {
        var isSuccess = await ProductService.DeleteProduct(productId);
        if (isSuccess)
        {
            SuccessMessage = "Product deleted successfully!";
            Products = await ProductService.GetProductsAsync();
            FilteredProducts = Products;
        }
        else
        {
            ErrorMessage = "Failed to delete product.";
        }
    }

    private void EditProduct(int productId)
    {
        // Navigate to edit page (not implemented in your request, but can be added)
        Navigation.NavigateTo($"/edit-product/{productId}");
    }

    private void GoToCreateProduct()
    {
        Navigation.NavigateTo("/create-product");
    }
}
